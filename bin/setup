#!/bin/bash
function guess_http_user(){
  echo "$(ps aux|grep apache|grep -v ^root|grep -v grep|cut -f1 -d\ |head -1)"
}

declare -A input=(
  [Host]="" 
  [Vanity]="www"
  [DBName]=""
  [DBUsername]=""
  [DBPassword]=""
  [DBHost]="localhost"
  [HTTPUser]=""
)

declare -A line=(
  [thin]="----------------------------------------------------------------"
  [thik]="================================================================"
)


PATH_CONF_HOST_DEFAULT="${0%/*}/../conf/host.conf.default"
PATH_CONF_HOST="${0%/*}/../conf/host.conf"


http_user_guess=$(guess_http_user)

echo
echo "${line[thik]}"
echo "  BS Host Setup"
echo "${line[thik]}"

while [ -z "${NEVER_LOGOFF}" ]; do

  echo

  read -p "Apache2 HTTP Server User [${http_user_guess}]: " inputHTTPUser
  input[HTTPUser]="${inputHTTPUSER:-${http_user_guess}}"

  echo
  echo "${line[thin]}"
  echo

  read -p "User Name \"${input[HTTPUser]}\" (y/N):" -r

  if [[ $REPLY =~ ^[Yy]$ ]]; then
    break
  fi

  echo
  echo "${line[thin]}"
  echo

done

while [ -z "${NEVER_LOGOFF}" ]; do

  echo

  read -p "Domain Name (domain.tld): " input[Host]
  #TODO validate hostname
  read -p "Vanity Host Name [www]: " inputVanity
  #TODO validate inputVanity
  input[Vanity]="${inputVanity:-www}"

  echo
  echo "${line[thin]}"
  echo

  read -p "${input[Vanity]}.${input[Host]} (y/n):" -r

  if [[ $REPLY =~ ^[Yy]$ ]]; then
    break
  fi

done

echo
echo "${line[thin]}"
echo
read -p "Setup Database? (y/n):" -r
echo 

if [[ $REPLY =~ ^[Yy]$ ]]; then

  while [ -z "${NEVER_LOGOFF}" ]; do

    read -p "Database Name: " input[DBName]
    read -p "Database Username: " input[DBUsername]
    read -p "Database Password: " input[DBPassword]
    read -p "Database Host [localhost]: " inputDBHost
    input[DBHost]="${inputDBHost:-localhost}"

    echo
    echo "${line[thin]}"
    echo 

    echo "Verify Database Settings:"

    echo
    echo "${line[thin]}"
    echo 

    echo "Database Name: ${input[DBName]}"
    echo "Database Username: ${input[DBUsername]}"
    echo "Database Password: ${input[DBPassword]}"
    echo "Database Host: ${input[DBHost]}"

    echo
    echo "${line[thin]}"
    echo 

    read -p "Database settings correct? (y/n):" -r
    echo 
  
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      break
    fi
  
  done
fi

echo
echo "${line[thik]}"
echo 

if [ -f "${PATH_CONF_HOST_DEFAULT}"  ]; then
  HOST_DEFAULT="$(cat "${PATH_CONF_HOST_DEFAULT}")";
  HOST_OUTPUT="${HOST_DEFAULT/BS_DEFAULT_HTTP_USER/${input[HTTPUser]}}"
  HOST_OUTPUT="${HOST_OUTPUT/BS_DEFAULT_HOST/${input[Host]}}"
  HOST_OUTPUT="${HOST_OUTPUT/BS_DEFAULT_VANITY/${input[Vanity]}}"
  HOST_OUTPUT="${HOST_OUTPUT/BS_DEFAULT_DB_NAME/${input[DBName]}}"
  HOST_OUTPUT="${HOST_OUTPUT/BS_DEFAULT_DB_USERNAME/${input[DBUsername]}}"
  HOST_OUTPUT="${HOST_OUTPUT/BS_DEFAULT_DB_PASSWORD/${input[DBPassword]}}"
  HOST_OUTPUT="${HOST_OUTPUT/BS_DEFAULT_DB_HOST/${input[DBHost]}}"
else

  echo "Default hostfile is missing (${PATH_CONF_HOST_DEFAULT})."

fi

echo "${HOST_OUTPUT}" > ${PATH_CONF_HOST}

if [ -f "${PATH_CONF_HOST}" ]; then
  cat "${PATH_CONF_HOST}";
fi
